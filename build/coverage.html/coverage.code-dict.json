{"/home/travis/build/npmtest/node-npmtest-peer-upnp/test.js":"/* istanbul instrument in package npmtest_peer_upnp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-peer-upnp/lib.npmtest_peer_upnp.js":"/* istanbul instrument in package npmtest_peer_upnp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_peer_upnp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_peer_upnp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-peer-upnp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-peer-upnp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_peer_upnp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_peer_upnp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_peer_upnp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_peer_upnp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_peer_upnp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_peer_upnp.__dirname + '/lib.npmtest_peer_upnp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-peer-upnp/node_modules/peer-upnp/index.js":"/*******************************************************************************\n * \n * Copyright (c) 2013 Louay Bassbouss, Fraunhofer FOKUS, All rights reserved.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3.0 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library. If not, see <http://www.gnu.org/licenses/>. \n * \n * AUTHORS: Louay Bassbouss (louay.bassbouss@fokus.fraunhofer.de)\n *     Martin Lasak (martin.lasak@fokus.fraunhofer.de)\n *     Alexander Futasz (alexander.futasz@fokus.fraunhofer.de)\n *\n ******************************************************************************/\n\n module.exports = require('./lib/peer-upnp');","/home/travis/build/npmtest/node-npmtest-peer-upnp/node_modules/peer-upnp/lib/peer-upnp.js":"/*******************************************************************************\n * \n * Copyright (c) 2013 Louay Bassbouss, Fraunhofer FOKUS, All rights reserved.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3.0 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library. If not, see <http://www.gnu.org/licenses/>. \n * \n * AUTHORS: Louay Bassbouss (louay.bassbouss@fokus.fraunhofer.de)\n *     Martin Lasak (martin.lasak@fokus.fraunhofer.de)\n *     Alexander Futasz (alexander.futasz@fokus.fraunhofer.de)\n *\n ******************************************************************************/\n \nvar os = require('os');\nvar fs = require('fs');\nvar ejs = require('ejs');\nvar events = require('events');\nvar xml2js = require(\"xml2js\");\nvar URL = require('url');\nvar http = require('http');\nvar util = require('util');\nvar UUID = require('node-uuid');\nvar ssdp = require('peer-ssdp');\n//var ssdp = require('ssdp');\nvar ROOT_DEVICE = \"upnp:rootdevice\";\nvar UPNP_VERSION = \"UPnP/1.1\";\nvar OS_NAME = os.type() || \"unknown\";\nvar OS_VERSION = os.release() || \"0.0\";\nvar INTERVAL = 10000;\nvar DEVICE_TEMPLATE = fs.readFileSync(__dirname + '/../xml/device-desc.xml', 'utf8');\nvar SERVICE_TEMPLATE = fs.readFileSync(__dirname + '/../xml/service-desc.xml', 'utf8');\nvar SOAP_REQ_TEMPLATE = fs.readFileSync(__dirname + '/../xml/soap-req.xml', 'utf8');\nvar SOAP_RSP_TEMPLATE = fs.readFileSync(__dirname + '/../xml/soap-rsp.xml', 'utf8');\nvar EVENT_TEMPLATE = fs.readFileSync(__dirname + '/../xml/event.xml', 'utf8');\nvar RENDER_DEVICE = ejs.compile(DEVICE_TEMPLATE, { open: '{{', close: '}}' });\nvar RENDER_SERVICE = ejs.compile(SERVICE_TEMPLATE, { open: '{{', close: '}}' });\nvar RENDER_SOAP_REQ = ejs.compile(SOAP_REQ_TEMPLATE, { open: '{{', close: '}}' });\nvar RENDER_SOAP_RSP = ejs.compile(SOAP_RSP_TEMPLATE, { open: '{{', close: '}}' });\nvar RENDER_EVENT = ejs.compile(EVENT_TEMPLATE, { open: '{{', close: '}}' });\n\nvar SSDP_ALL = \"ssdp:all\";\nvar UPnPError = function(message,code) {\n\tError.call(this);\n\tError.captureStackTrace(this, this.constructor);\n\tthis.name = \"UPnPError\";\n\tthis.message = message;\n\tthis.code = parseInt(code) || 0;\n};\nutil.inherits(UPnPError, Error);\n\nvar createPeer = function(options){\n\toptions = options || {};\n\tvar peer = new Peer(options);\n\treturn peer;\n};\n\nvar Peer = function(options){\n\tvar self = this;\n\tthis.prefix = options.prefix || \"\";\n\tthis.server = options.server || null;\n\tthis.hostname = options.hostname || getHostname();\n\tthis.port = options.port || (this.server && this.server.address() && this.server.address().port);\n\tthis.interval = null;\n\tthis.devices = {};\n\tthis.remoteDevices = {};\n\tthis.ssdpPeer = ssdp.createPeer();\n\tthis.ssdpPeer.on(\"notify\",function(headers, address){\n\t\tvar nts = headers['NTS'];\n\t\tvar nt = headers['NT'];\n\t\tvar usn = headers['USN'] || '';\n\t\tvar udn = usn.split(\"::\")[0];\n\t\tif (nts == ssdp.ALIVE) {\n\t\t\tif (!self.remoteDevices[udn] && (self.listeners(SSDP_ALL).length>0 || self.listeners(nt).length>0)) {\n\t\t\t\tvar location = headers['LOCATION'];\n\t\t\t\tself.remoteDevices[udn] = new RemoteDevice(self,{\n\t\t\t\t\tdescriptionUrl: location,\n\t\t\t\t\tUDN: udn\n\t\t\t\t});\n\t\t\t\tself.remoteDevices[udn].bind(function(device){\n\t\t\t\t\tfor ( var i in device.services) {\n\t\t\t\t\t\tvar service = device.services[i];\n\t\t\t\t\t\tself.emit(SSDP_ALL,service);\n\t\t\t\t\t\tself.emit(service.serviceType,service);\n\t\t\t\t\t}\n\t\t\t\t\tself.emit(SSDP_ALL,device);\n\t\t\t\t\tself.emit(device.deviceType,device);\n\t\t\t\t\tself.emit(device.UDN,device);\n\t\t\t\t\tif (nt == ROOT_DEVICE) {\n\t\t\t\t\t\tself.emit(ROOT_DEVICE,device);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\telse if (nts == ssdp.BYEBYE){\n\t\t\tvar device = self.remoteDevices[udn];\n\t\t\tif (device) {\n\t\t\t\tdelete self.remoteDevices[udn];\n\t\t\t\tfor ( var i in device.services) {\n\t\t\t\t\tvar service = device.services[i];\n\t\t\t\t\tservice.emit(\"disappear\",service);\n\t\t\t\t}\n\t\t\t\tdevice.emit(\"disappear\",device);\n\t\t\t}\n\t\t}\n\t}).on(\"search\",function(headers, address){\n\t\tvar st = headers['ST'];\n\t\trespond(st,self,address);\n\t}).on(\"found\",function(headers, address){\n\t\tvar nts = headers['NTS'];\n\t\tvar st = headers['ST'];\n\t\tvar usn = headers['USN'];\n\t\tvar udn = usn.split(\"::\")[0];\n\t\tif (!self.remoteDevices[udn] && (self.listeners(SSDP_ALL).length>0 || self.listeners(st).length>0)) {\n\t\t\tvar location = headers['LOCATION'];\n\t\t\tself.remoteDevices[udn] = new RemoteDevice(self,{\n\t\t\t\tdescriptionUrl: location,\n\t\t\t\tUDN: udn\n\t\t\t});\n\t\t\tself.remoteDevices[udn].bind(function(device){\n\t\t\t\tfor ( var i in device.services) {\n\t\t\t\t\tvar service = device.services[i];\n\t\t\t\t\tself.emit(SSDP_ALL,service);\n\t\t\t\t\tself.emit(service.serviceType,service);\n\t\t\t\t}\n\t\t\t\tself.emit(SSDP_ALL,device);\n\t\t\t\tself.emit(device.deviceType,device);\n\t\t\t\tself.emit(device.UDN,device);\n\t\t\t\tif (st == ROOT_DEVICE) {\n\t\t\t\t\tself.emit(ROOT_DEVICE,device);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}).on(\"ready\",function(){\n\t\tnotify(ssdp.ALIVE,self);\n\t\tself.interval = setInterval(function(){\n\t\t\tnotify(ssdp.ALIVE,self);\n\t\t},INTERVAL);\n\t\tself.emit(\"ready\",self);\n\t}).on(\"close\",function(){\n\t\tclearInterval(self.interval);\n\t\tself.interval = null;\n\t\tself.emit(\"close\",self);\n\t});\n\tthis.on(\"newListener\",function(event, listener){\n\t\tif (event == SSDP_ALL || event == ROOT_DEVICE || event.indexOf(\"urn:\") == 0 || event.indexOf(\"uuid:\") == 0) {\n\t\t\tthis.ssdpPeer.search({\n\t\t\t\tST: event\n\t\t\t});\n\t\t}\n\t});\n\tif (this.server) {\n\t\tregisterHTTPHandler(this);\n\t}\n};\nutil.inherits(Peer, events.EventEmitter);\n\nPeer.prototype.start = function(){\n\tif (this.ssdpPeer && !this.interval) {\n\t\tthis.ssdpPeer.start();\n\t}\n\treturn this;\n};\n\nPeer.prototype.close = function(){\n\tunregisterHTTPHandler(this);\n\tvar self = this;\n\tclearInterval(this.interval);\n\tthis.interval = null;\n\tnotify(ssdp.BYEBYE,this);\n\tsetTimeout(function(){\n\t\tself.ssdpPeer && self.ssdpPeer.close();\n\t\tself.ssdpPeer = null;\n\t},1000);\n};\n\nPeer.prototype.createDevice = function(options){\n\toptions = options || {};\n\toptions.root = true;\n\tvar device = new Device(this,options);\n\tthis.devices[device.uuid] = device;\n\tif (device.available === true) {\n\t\tdevice.advertise();\n\t}\n\treturn device;\n};\n\nPeer.prototype.removeDevice = function(uuid){\n\tif (this.devices[uuid]) {\n\t\tnotify(ssdp.BYEBYE,this,this.devices[uuid]);\n\t\tdelete this.devices[uuid];\n\t}\n};\n\nvar createStub = function(controlUrl,serviceType, actionName){\n\tvar stub = function(inputs, callback){\n\t\tvar options = {\n\t\t\tinputs: inputs,\n\t\t\tserviceType: serviceType,\n\t\t\tactionName: actionName\n\t\t};\n\t\tvar soap = RENDER_SOAP_REQ(options);\n\t\tvar url = URL.parse(controlUrl);\n\t\tvar opt = {\n\t\t\thost: url.hostname,\n\t\t\tport: url.port,\n\t\t\tpath: url.path,\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'CONTENT-TYPE': 'text/xml; charset=\"utf-8\"',\n\t\t\t\t'SOAPACTION': '\"'+serviceType+\"#\"+actionName+'\"'\n\t\t\t}\n\t\t};\n\t\tif (typeof callback == \"function\") {\n\t\t\thttpRequest(opt, soap, function(err, xml) {\n                if(err){\n                    var result = new UPnPError(\"HTTP Request Error:\"+(err.message ||\"\"));\n                    callback.call(null,result);\n                    return;\n                }\n\t\t\t\txml2js.parseString(xml,{mergeAttrs: true, explicitArray: false, ignoreXmlns: true, ignoreAttrs: true},function(err,json){\n\t\t\t\t\tvar result;\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tresult = new UPnPError(\"Response is not a valide XML message:\"+(err.message ||\"\"));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresult = json && json.Envelope && json.Envelope.Body && json.Envelope.Body[actionName+\"Response\"];\n\t\t\t\t\t\t\tif (typeof result == \"undefined\") {\n\t\t\t\t\t\t\t\tthrow new Error();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (typeof result == \"string\") {\n\t\t\t\t\t\t\t\tresult = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\terr = json.Envelope.Body.Fault.detail.UPnPError || {};\n\t\t\t\t\t\t\t\tresult = new UPnPError(err.errorDescription, err.errorCode);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tresult = new UPnPError(\"Response is not a valide uPnP/SOAP message\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcallback.call(null,result);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n\treturn stub;\n};\n\n/*Peer.prototype.bindDevice = function(descUrl, callback){\n\tvar client = rest(descUrl);\n\tclient.then(function(rsp) {\n\t\txml2js.parseString(rsp.entity, {explicitArray: false, ignoreXmlns: true, mergeAttrs: true},function (err, json) {\n\t\t\tvar options = json.root.device;\n\t\t\tif (typeof callback == \"function\") {\n\t\t\t\tcallback.call(null, new RemoteDevice(descUrl,options));\n\t\t\t}\n\t    });\n\t});\n};*/\n\nvar Device = function(peer, options){\n\tthis.peer = peer;\n\tthis.root = (options.root === true);\n\tthis.available = (options.autoAdvertise === true);\n\tthis.uuid = options.uuid || UUID.v4();\n\tthis.domain = options.domain || null;\n\tthis.type = options.type || null;\n\tthis.version = options.version || \"1\";\n\tthis.productName = options.productName || \"unknown\";\n\tthis.productVersion = options.productVersion || \"0.0\";\n\tthis.server = OS_NAME+\"/\"+OS_VERSION+\" \"+UPNP_VERSION+\" \"+this.productName+\"/\"+this.productVersion;\n\tthis.deviceType = options.deviceType || (\"urn:\"+(this.domain || \"\")+\":device:\"+(this.type || \"\")+\":\"+this.version);\n\tthis.friendlyName = options.friendlyName || null;\n\tthis.manufacturer = options.manufacturer || null;\n\tthis.manufacturerURL = options.manufacturerURL || null;\n\tthis.modelDescription = options.modelDescription || null;\n\tthis.modelName = options.modelName || null;\n\tthis.modelNumber = options.modelNumber || null;\n\tthis.modelURL = options.modelURL || null;\n\tthis.serialNumber = options.serialNumber || null;\n\tthis.UDN = \"uuid:\"+this.uuid;\n\tthis.UPC = options.UPC|| null;\n\tthis.presentationURL = options.presentationURL || null;\n\tthis.descriptionURL = this.peer.prefix+\"/device/desc.xml?udn=\"+this.uuid;\n\tthis.icons = options.icons || [];\n\tthis.configId = 1;\n\tthis.services = {};\n\tthis.devices = {};\n};\n\nDevice.prototype.advertise = function(){\n\tthis.available = true;\n\tnotify(ssdp.ALIVE,this.peer,this);\n};\n\nDevice.prototype.createService = function(options){\n\toptions = options || {};\n\tvar service = new Service(this,options);\n\tthis.services[service.serviceType] = service;\n\treturn service;\n};\nDevice.prototype.removeService = function(serviceType){\n\tdelete this.services[serviceType];\n};\n\nvar Service = function(device, options){\n\tthis.device = device;\n\tthis.domain = options.domain || this.device.domain || null; \n\tthis.type = options.type || null;\n\tthis.version = options.version || \"1\";\n\tthis.serviceId = options.serviceId || (\"urn:\"+(this.domain || \"\")+\":serviceId:\"+(this.type || \"\"));\n\tthis.serviceType = options.serviceType || (\"urn:\"+(this.domain || \"\")+\":service:\"+(this.type||\"\")+\":\"+(this.version || \"\"));\n\tthis.description = options.description || null;\n\tthis.USN = this.device.uuid+\"::\"+this.serviceType;\n\tthis.SCPDURL = this.device.peer.prefix + \"/service/desc.xml?usn=\"+this.USN;\n\tthis.controlURL = this.device.peer.prefix + \"/service/control?usn=\"+this.USN;\n\tthis.eventSubURL = this.device.peer.prefix + \"/service/events?usn=\"+this.USN;\n\tthis.configId = 1;\n\tthis.implementation = options.implementation || null;\n\tthis.state = {};\n\tthis.subscriptions = {};\n};\n\nService.prototype.set = function(name,value){\n\tthis.state[name] = value;\n};\n\nService.prototype.get = function(name){\n\treturn this.state[name];\n};\n\nService.prototype.notify = function(){\n\tvar names = arguments;\n\tvar variables = {};\n\tif (names.length == 0) {\n\t\tvariables = this.state;\n\t}\n\telse {\n\t\tfor ( var i = 0; i < names.length; i++) {\n\t\t\tvar name = names[i];\n\t\t\tvariables[name] = this.state[name];\n\t\t}\n\t}\n\tvar options = {\n\t\tvariables: variables\n\t};\n\tvar xml = RENDER_EVENT(options);\n\tfor ( var sid in this.subscriptions) {\n\t\tvar subscription = this.subscriptions[sid];\n\t\tvar callbacks = subscription.callbacks;\n\t\tfor ( var i = 0; i < callbacks.length; i++) {\n\t\t\tvar callback = callbacks[i];\n\t\t\tvar url = URL.parse(callback);\n\t\t\tvar req = http.request({\n\t\t\t\thost: url.hostname,\n\t\t\t\tport: url.port,\n\t\t\t\tpath: url.path,\n\t\t\t\tmethod: 'NOTIFY',\n\t\t\t\theaders: {\n\t\t\t\t\tHOST: url.host,\n\t\t\t\t\t'CONTENT-TYPE': 'text/xml; charset=\"utf-8\"',\n\t\t\t\t\tNT: \"upnp:event\",\n\t\t\t\t\tNTS: 'upnp:propchange',\n\t\t\t\t\tSID: sid,\n\t\t\t\t\tSEQ: subscription.seq\n\t\t\t\t}\n\t\t\t});\n\t\t\treq.end(xml,'utf8');\n\t\t}\n\t\tsubscription.seq++;\n\t}\n};\n\nvar RemoteDevice = function(peer,options){\n\tthis.peer = peer;\n\tthis.descriptionUrl = options.descriptionUrl || null;\n\tthis.deviceType = options.deviceType || null;\n\tthis.UDN = options.UDN || null;\n};\nutil.inherits(RemoteDevice, events.EventEmitter);\n\nRemoteDevice.prototype.bind = function(callback){\n\tvar self = this;\n\thttpRequest(this.descriptionUrl, function(err, data) {\n\t\tif (err) {\n\t\t\tconsole.error(\"err: failed to get device description\");\n\t\t\treturn;\n\t\t}\n\t\txml2js.parseString(data, {explicitArray: false, ignoreXmlns: true, mergeAttrs: true},function (err, json) {\n\t\t\tif (err || !json) return;\n\t\t\tvar options = json.root.device;\n\t\t\tself.deviceType = options.deviceType || null;\n\t\t\tself.friendlyName = options.friendlyName || null;\n\t\t\tself.manufacturer = options.manufacturer || null;\n\t\t\tself.manufacturerURL = options.manufacturerURL || null;\n\t\t\tself.modelDescription = options.modelDescription || null;\n\t\t\tself.modelName = options.modelName || null;\n\t\t\tself.modelNumber = options.modelNumber || null;\n\t\t\tself.modelURL = options.modelURL || null;\n\t\t\tself.serialNumber = options.serialNumber || null;\n\t\t\tself.UDN = options.UDN || null;\n\t\t\tself.UPC = options.UPC || null;\n\t\t\tself.icons = [];\n\t\t\tvar iconList = options.iconList && options.iconList.icon || [];\n\t\t\ticonList = iconList instanceof Array? iconList: [iconList];\n\t\t\tfor ( var i in iconList) {\n\t\t\t\tvar icon = iconList[i];\n\t\t\t\ticon.url = URL.resolve(self.descriptionUrl, icon.url);\n\t\t\t\tself.icons.push(icon);\n\t\t\t}\n\t\t\tself.services = {};\n\t\t\tvar serviceList = options.serviceList && options.serviceList.service || [];\n\t\t\tserviceList = serviceList instanceof Array? serviceList: [serviceList];\n\t\t\t\n\t\t\tfor ( var i in serviceList) {\n\t\t\t\tvar options = serviceList[i];\n\t\t\t\toptions.SCPDURL = URL.resolve(self.descriptionUrl, options.SCPDURL);\n\t\t\t\toptions.controlURL = URL.resolve(self.descriptionUrl, options.controlURL);\n\t\t\t\toptions.eventSubURL = URL.resolve(self.descriptionUrl, options.eventSubURL);\n\t\t\t\t\n\t\t\t\tvar service = new RemoteService(self,options);\n\t\t\t\tself.services[service.serviceType] = service;\n\t\t\t}\n\t\t\tif (typeof callback == \"function\") {\n\t\t\t\tcallback.call(null, self);\n\t\t\t}\n\t\t});\n\t});\n};\n\nRemoteDevice.prototype.getService = function(serviceType){\n\treturn this.services && this.services[serviceType];\n};\n\nvar RemoteService = function(device, options){\n\tthis.device= device;\n\tthis.configId = options.configId || null;\n\tthis.serviceId = options.serviceId || null;\n\tthis.serviceType = options.serviceType || null;\n\tthis.USN = device.UDN+\"::\"+this.serviceType;\n\tthis.SCPDURL = options.SCPDURL || null;\n\tthis.controlURL = options.controlURL || null;\n\tthis.eventSubURL = options.eventSubURL || null;\n\tthis.actions = null;\n\tthis.variables = null;\n\tthis.timeoutHandle = null;\n\t\n\tthis.on(\"newListener\",function(event, listener){\n\t\tif (event == \"event\" && this.listeners(\"event\") == 0) {\n\t\t\tsubscribe(this);\n\t\t}\n\t});\n\tthis.on(\"removeListener\",function(event, listener){\n\t\tif (event == \"event\" && this.listeners(\"event\") == 0) {\n\t\t\tunsubscribe(this);\n\t\t}\n\t});\n};\nutil.inherits(RemoteService, events.EventEmitter);\nRemoteService.prototype.bind = function(callback){\n\tvar self = this;\n\tif (this.actions) {\n\t\tcallback.call(null, this.actions);\n\t} else {\n\t\tthis.actions = {};\n\t\tthis.variables = {};\n\t\thttpRequest(this.SCPDURL, function(err, data) {\n\t\t\txml2js.parseString(data, {explicitArray: false, ignoreXmlns: true, mergeAttrs: true}, function (err, json) {\n\t\t\t    var proxy = {};\n\t\t\t    proxy.SCPD = json && json.scpd || {};\n\t\t\t\tvar variables = json && json.scpd && json.scpd.serviceStateTable && json.scpd.serviceStateTable.stateVariable || [];\n\t\t\t\tvariables = variables instanceof Array? variables: [variables];\n\t\t\t\tfor ( var i = 0; i < variables.length; i++) {\n\t\t\t\t\tvar stateVariable = variables[i];\n\t\t\t\t\tvar variable = {\n\t\t\t\t\t\tname: stateVariable.name,\n\t\t\t\t\t\ttype: stateVariable.dataType,\n\t\t\t\t\t\tdefault: stateVariable.defaultValue,\n\t\t\t\t\t\tevents: (typeof stateVariable.sendEvents == \"undefined\") || stateVariable.sendEvents == \"yes\",\n\t\t\t\t\t\tmulticast:  stateVariable.multicast == \"yes\"\n\t\t\t\t\t};\n\t\t\t\t\tvar allowedValues = stateVariable.allowedValueList && stateVariable.allowedValueList.allowedValue;\n\t\t\t\t\tif (allowedValues) {\n\t\t\t\t\t\tvariable.enum = allowedValues instanceof Array? allowedValues: [allowedValues];\n\t\t\t\t\t}\n\t\t\t\t\tvar allowedValueRange = stateVariable.allowedValueRange;\n\t\t\t\t\tif (allowedValueRange) {\n\t\t\t\t\t\tvariable.range = {\n\t\t\t\t\t\t\tmin: allowedValueRange.minimum,\n\t\t\t\t\t\t\tmax: allowedValueRange.maximum,\n\t\t\t\t\t\t\tstep: allowedValueRange.step\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tself.variables[variable.name] = variable;\n\t\t\t\t\tproxy[variable.name] = variable;\n\t\t\t\t}\n\t\t\t\tvar actions = json && json.scpd && json.scpd.actionList && json.scpd.actionList.action || [];\n\t\t\t\tactions = actions instanceof Array? actions: [actions];\n\t\t\t\tfor ( var i = 0; i < actions.length; i++) {\n\t\t\t\t\tvar action = actions[i];\n\t\t\t\t\tvar actionName = action.name;\n\t\t\t\t\tvar stub = createStub(self.controlURL, self.serviceType,actionName);\n\t\t\t\t\tstub.name = actionName;\n\t\t\t\t\tstub.inputs = {};\n\t\t\t\t\tstub.outputs = {};\n\t\t\t\t\tvar arguments = action.argumentList && action.argumentList.argument || [];\n\t\t\t\t\targuments = arguments instanceof Array? arguments: [arguments];\n\t\t\t\t\tfor ( var j = 0; j < arguments.length; j++) {\n\t\t\t\t\t\tvar argument = arguments[j];\n\t\t\t\t\t\tif (argument.direction == \"in\") {\n\t\t\t\t\t\t\tstub.inputs[argument.name] =  argument.relatedStateVariable;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (argument.direction == \"out\") {\n\t\t\t\t\t\t\tstub.outputs[argument.name] =  argument.relatedStateVariable;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tself.actions[actionName] = stub;\n\t\t\t\t\tproxy[actionName] = stub;\n\t\t\t\t}\n\t\t\t\tif (typeof callback == \"function\") {\n\t\t\t\t\tcallback.call(null, proxy);\n\t\t\t\t}\n\t\t    });\n\t\t});\n\t}\n\treturn this;\n};\n\nvar subscribe = function(service){\n\tvar peer = service.device.peer;\n\tvar port = peer.server && peer.server.address().port;\n\tvar eventSubURL = service.eventSubURL;\n\tvar url = URL.parse(eventSubURL);\n\tvar req = http.request({\n\t\thost: url.hostname,\n\t\tport: url.port,\n\t\tpath: url.path,\n\t\tmethod: 'SUBSCRIBE',\n\t\theaders: {\n\t\t\tHOST: url.host,\n\t\t\tCALLBACK: \"<http://\"+peer.hostname+\":\"+port+peer.prefix+\"/events?usn=\"+service.USN+\">\", \n\t\t\tNT: \"upnp:event\"\n\t\t}\n\t},function(rsp){\n\t\tvar sid = rsp.headers['sid'];\n\t\tvar timeout = rsp.headers['timeout'];\n\t\ttimeout = timeout && parseInt(timeout.replace(\"Second-\",\"\")) || 1800;\n\t\tservice.sid = sid;\n\t\tclearTimeout(service.timeoutHandle);\n\t\tservice.timeoutHandle = setTimeout(function(){\n\t\t\trenew(service);\n\t\t},(timeout-1)*1000);\n\t});\n\treq.end();\n};\n\nvar renew = function(service){\n\tif (service.sid) {\n\t\tvar peer = service.device.peer;\n\t\tvar port = peer.server && peer.server.address().port;\n\t\tvar eventSubURL = service.eventSubURL;\n\t\tvar url = URL.parse(eventSubURL);\n\t\tvar req = http.request({\n\t\t\thost: url.hostname,\n\t\t\tport: url.port,\n\t\t\tpath: url.path,\n\t\t\tmethod: 'SUBSCRIBE',\n\t\t\theaders: {\n\t\t\t\tHOST: url.host,\n\t\t\t\tSID: service.sid\n\t\t\t}\n\t\t},function(rsp){\n\t\t\tvar timeout = rsp.headers['timeout'];\n\t\t\ttimeout = timeout && parseInt(timeout.replace(\"Second-\",\"\")) || 1800;\n\t\t\tclearTimeout(service.timeoutHandle);\n\t\t\tservice.timeoutHandle = setTimeout(function(){\n\t\t\t\trenew(service);\n\t\t\t},(timeout-1)*1000);\n\t\t});\n\t\treq.end();\n\t}\n};\n\nvar unsubscribe = function(service){\n\tclearTimeout(service.timeoutHandle);\n\tservice.timeoutHandle = null;\n\tif (service.sid) {\n\t\tvar peer = service.device.peer;\n\t\tvar port = peer.server && peer.server.address().port;\n\t\tvar eventSubURL = service.eventSubURL;\n\t\tvar url = URL.parse(eventSubURL);\n\t\tvar req = http.request({\n\t\t\thost: url.hostname,\n\t\t\tport: url.port,\n\t\t\tpath: url.path,\n\t\t\tmethod: 'UNSUBSCRIBE',\n\t\t\theaders: {\n\t\t\t\tHOST: url.host,\n\t\t\t\tSID: service.sid\n\t\t\t}\n\t\t},function(rsp){\n\t\t\t\n\t\t});\n\t\treq.end();\n\t\tservice.sid = null;\n\t}\n};\nvar registerHTTPHandler = function(peer){\n\tpeer.server && peer.server.on(\"request\", peer.httpHandler = function(req,rsp){\n\t\tvar self = this;\n\t\tif (req) {\n\t\t\tvar url = URL.parse(req.url,true);\n\t\t\tvar method = req.method.toUpperCase();\n\t\t\tvar isPeer = url.pathname.indexOf(peer.prefix) == 0;\n\t\t}\n\t\telse {\n\t\t\tvar url = '/';\n\t\t\tvar method = 'GET';\n\t\t\tvar isPeer = false;\n\t\t}\n\t\tif (isPeer) {\n\t\t\tvar path = url.pathname.substr(peer.prefix.length);\n\t\t\tvar handler = httpHandlers[method+\" \"+path];\n\t\t\tif (typeof handler == \"function\") {\n\t\t\t\treq.path = path;\n\t\t\t\treq.query = url.query;\n\t\t\t\treq.data = '';\n\t\t\t\treq.setEncoding('utf8');\n\t\t\t\treq.on('data', function(chunk) { req.data += chunk;});\n\t\t\t\treq.on('end', function(){handler.call(self,req,rsp,peer)});\n\t\t\t}\n\t\t\telse {\n\t\t\t\trsp.statusCode = 404;\n\t\t\t\trsp.end(\"Not found\");\n\t\t\t}\n\t\t}\n\t});\n};\nvar unregisterHTTPHandler = function(peer){\n\tif (peer.server && peer.httpHandler) {\n\t\tpeer.server.removeListener(\"request\",peer.httpHandler);\n\t\tpeer.httpHandler = null;\n\t}\n};\n\n\nvar handleGetDeviceDescription = function(req,rsp,peer){\n\tvar udn = req.query[\"udn\"];\n\tvar device = peer.devices[udn];\n\tif (device) {\n\t\tvar xml = RENDER_DEVICE(device);\n\t\trsp.setHeader('Content-Type','text/xml;charset=utf-8');\n\t\trsp.end(xml,'utf8');\n\t} else {\n\t\trsp.statusCode = 404;\n\t\trsp.end(\"Device not found\");\n\t}\n};\n\nvar handleGetServiceDescription = function(req,rsp,peer){\n\tvar usn = req.query[\"usn\"] || \"\";\n\tvar split = usn.split(\"::\");\n\tif (split.length==2) {\n\t\tvar udn = split[0];\n\t\tvar serviceType = split[1];\n\t\tvar device = peer.devices[udn];\n\t\tvar service = device && device.services[serviceType];\n\t\tif (service) {\n\t\t\tvar options = {\n\t\t\t\tactions: service.description && service.description.actions || {},\n\t\t\t\tvariables: service.description && service.description.variables || {},\n\t\t\t\tconfigId: service.configId\n\t\t\t};\n\t\t\tvar xml = RENDER_SERVICE(options);\n\t\t\trsp.setHeader('Content-Type','text/xml;charset=utf-8');\n\t\t\trsp.end(xml,'utf8');\n\t\t} else {\n\t\t\trsp.statusCode = 404;\n\t\t\trsp.end(\"Service not found\");\n\t\t}\n\t}\n\telse {\n\t\trsp.statusCode = 400;\n\t\trsp.end(\"Parameter usn is missing or not valid\");\n\t}\n};\n\nvar handlePostControl = function(req,rsp,peer){\n\tvar usn = req.query[\"usn\"] || \"\";\n\tvar split = usn.split(\"::\");\n\tif (split.length==2) {\n\t\tvar udn = split[0];\n\t\tvar serviceType = split[1];\n\t\tvar device = peer.devices[udn];\n\t\tvar service = device && device.services[serviceType];\n\t\tvar actionName = req.headers[\"SOAPACTION\"] || req.headers[\"soapaction\"];\n\t\tactionName = actionName && actionName.substring(actionName.lastIndexOf(\"#\")+1,actionName.length-1);\n\t\tif (service && actionName) {\n\t\t\txml2js.parseString(req.data,{mergeAttrs: true, explicitArray: false, ignoreXmlns: true, ignoreAttrs: true},function(err,json){\n\t\t\t\tif (err) {\n\t\t\t\t\trsp.statusCode = 400;\n\t\t\t\t\trsp.end(\"Request is not a valide XML message:\"+(err.message ||\"\"));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar inputs = json.Envelope.Body[actionName];\n\t\t\t\t\t\tif (typeof inputs == \"undefined\") {\n\t\t\t\t\t\t\tthrow new Error();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof inputs == \"string\") {\n\t\t\t\t\t\t\tinputs = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar options = {\n\t\t\t\t\t\t\tserviceType: service.type,\n\t\t\t\t\t\t\tactionName: actionName\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\toptions.outputs = service.implementation[actionName].call(service,inputs) || {};\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\toptions.error = new UPnPError(e.message,501);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar xml = RENDER_SOAP_RSP(options);\n\t\t\t\t\t\trsp.setHeader('Content-Type','text/xml;charset=utf-8');\n\t\t\t\t\t\trsp.end(xml,'utf8');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\trsp.statusCode = 400;\n\t\t\t\t\t\trsp.end(\"Request is not a valide uPnP/SOAP message\",'utf8');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\trsp.statusCode = 404;\n\t\t\trsp.end(\"Service or action not found\",'utf8');\n\t\t}\n\t}\n\telse {\n\t\trsp.statusCode = 400;\n\t\trsp.end(\"Parameter usn is missing or not valid\",'utf8');\n\t}\n};\n\nvar handlePostEvent = function(req,rsp,peer){\n\tvar usn = req.query[\"usn\"] || \"\";\n\tvar split = usn.split(\"::\");\n\tif (split.length==2) {\n\t\tvar udn = split[0];\n\t\tvar serviceType = split[1];\n\t\tvar device = peer.remoteDevices[udn];\n\t\tvar service = device && device.services[serviceType];\n\t\tif (service) {\n\t\t\txml2js.parseString(req.data,{mergeAttrs: true, explicitArray: false, ignoreXmlns: true},function(err,json){\n\t\t\t\tif (json) {\n\t\t\t\t\tvar data = {};\n\t\t\t\t\tvar props = json.propertyset && json.propertyset.property || [];\n\t\t\t\t\tprops = props instanceof Array?props:[props];\n\t\t\t\t\tfor ( var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar prop = props[i];\n\t\t\t\t\t\tfor ( var key in prop) {\n\t\t\t\t\t\t\tdata[key] = prop[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tservice.emit(\"event\",data);\n                    rsp.end();\n\t\t\t\t}\n                else {\n                    rsp.statusCode = 400;\n                    rsp.end(\"Request is not a valide XML message:\"+(err && err.message ||\"\"));\n                }\n\t\t\t});\n\t\t}\n        else {\n            rsp.statusCode = 404;\n            rsp.end(\"Service not found\",'utf8');\n        }\n\t}\n    else {\n        rsp.statusCode = 400;\n        rsp.end(\"Parameter usn is missing or not valid\",'utf8');\n    }\n};\n\nvar handleSubscribeEvent = function(req,rsp,peer){\n\tvar usn = req.query[\"usn\"] || \"\";\n\tvar split = usn.split(\"::\");\n\tif (split.length==2) {\n\t\tvar udn = split[0];\n\t\tvar serviceType = split[1];\n\t\tvar device = peer.devices[udn];\n\t\tvar service = device && device.services[serviceType];\n\t\tif (service) {\n\t\t\tvar sid = \"uuid:\"+UUID.v4();\n\t\t\tvar callbacks = req.headers.callback && req.headers.callback.replace(/[<|>]/g,\"\").split(\",\");\n\t\t\tservice.subscriptions[sid] = {\n\t\t\t\t\tcallbacks: callbacks,\n\t\t\t\t\tseq: 0\n\t\t\t};\n\t\t\tvar timeout = req.headers.timeout || \"Second-1800\";\n\t\t\trsp.setHeader('DATE',new Date().toUTCString());\n\t\t\trsp.setHeader('SERVER',\"win/5.1 UPnP/1.1 famium/0.0.1\");\n\t\t\trsp.setHeader('SID',sid);\n\t\t\trsp.setHeader('CONTENT-LENGTH',0);\n\t\t\trsp.setHeader('TIMEOUT',timeout);\n\t\t}\n\t\telse{\n\t\t\trsp.statusCode = 404;\n\t\t}\n\t}\n\telse{\n\t\trsp.statusCode = 400;\n\t}\n\trsp.end();\n};\n\nvar handleUnsubscribeEvent = function(req,rsp,peer){\n\tvar usn = req.query[\"usn\"] || \"\";\n\tvar split = usn.split(\"::\");\n\tif (split.length==2) {\n\t\tvar udn = split[0];\n\t\tvar serviceType = split[1];\n\t\tvar device = peer.devices[udn];\n\t\tvar service = device && device.services[serviceType];\n\t\tif (service) {\n\t\t\tvar sid = req.headers.sid;\n\t\t\tdelete service.subscriptions[sid];\n\t\t}\n\t\telse{\n\t\t\trsp.statusCode = 404;\n\t\t}\n\t}\n\telse{\n\t\trsp.statusCode = 400;\n\t}\n\trsp.end();\n};\n\nvar httpHandlers = {\n\t\"GET /device/desc.xml\": handleGetDeviceDescription,\n\t\"GET /service/desc.xml\": handleGetServiceDescription,\n\t\"POST /service/control\": handlePostControl,\n\t\"NOTIFY /events\": handlePostEvent,\n\t\"SUBSCRIBE /service/events\": handleSubscribeEvent,\n\t\"UNSUBSCRIBE /service/events\": handleUnsubscribeEvent\n};\n\nvar notify = function(nts,peer,entity){\n\tvar port = peer.port;\n\tif (!peer.ssdpPeer) {\n\t\treturn;\n\t}\n\tvar devices = peer.devices;\n\tif (entity instanceof Device) {\n\t\tdevices = [entity];\n\t}\n\tfor ( var i in devices) {\n\t\tvar device = devices[i];\n\t\tif (device.available) {\n\t\t\tvar headers = {\n\t\t\t\t//'LOCATION': \"http://\"+peer.hostname+\":\"+port+device.descriptionURL,\n                'LOCATION': \"http://{{networkInterfaceAddress}}:\"+port+device.descriptionURL,\n                'SERVER': device.server,\n\t\t\t\t'CONFIGID.UPNP.ORG': device.configId,\n\t\t\t\t'NTS': nts\n\t\t\t};\n\t\t\theaders['NT'] = ROOT_DEVICE;\n\t\t\theaders['USN'] = device.UDN+\"::\"+ROOT_DEVICE;\n\t\t\tpeer.ssdpPeer.notify(headers);\n\t\t\theaders['NT'] = device.UDN;\n\t\t\theaders['USN'] = device.UDN;\n\t\t\tpeer.ssdpPeer.notify(headers);\n\t\t\theaders['NT'] = device.deviceType;\n\t\t\theaders['USN'] = device.UDN+\"::\"+device.deviceType;\n\t\t\tpeer.ssdpPeer.notify(headers);\n\t\t\tfor ( var j in device.services) {\n\t\t\t\tvar service = device.services[j];\n\t\t\t\theaders['NT'] = service.serviceType;\n\t\t\t\theaders['USN'] = device.UDN+\"::\"+service.serviceType;\n\t\t\t\tpeer.ssdpPeer.notify(headers);\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar respond = function(st,peer,address){\n\tvar port = peer.port;\n\tif (!peer.ssdpPeer) {\n\t\treturn;\n\t}\n\tif (st == SSDP_ALL) {\n\t\tfor ( var i in peer.devices) {\n\t\t\tvar device = peer.devices[i];\n\t\t\tif (device.available) {\n\t\t\t\tvar headers = {\n\t\t\t\t\t//'LOCATION': \"http://\"+peer.hostname+\":\"+port+device.descriptionURL,\n                    'LOCATION': \"http://{{networkInterfaceAddress}}:\"+port+device.descriptionURL,\n\t\t\t\t\t'SERVER': device.server,\n\t\t\t\t\t'CONFIGID.UPNP.ORG': device.configId\n\t\t\t\t};\n\t\t\t\theaders['ST'] = ROOT_DEVICE;\n\t\t\t\theaders['USN'] = device.UDN+\"::\"+ROOT_DEVICE;\n\t\t\t\tpeer.ssdpPeer.reply(headers,address);\n\t\t\t\theaders['ST'] = device.UDN;\n\t\t\t\theaders['USN'] = device.UDN;\n\t\t\t\tpeer.ssdpPeer.reply(headers,address);\n\t\t\t\theaders['ST'] = device.deviceType;\n\t\t\t\theaders['USN'] = device.UDN+\"::\"+device.deviceType;\n\t\t\t\tpeer.ssdpPeer.reply(headers,address);\n\t\t\t\tfor ( var j in device.services) {\n\t\t\t\t\tvar service = device.services[j];\n\t\t\t\t\theaders['ST'] = service.serviceType;\n\t\t\t\t\theaders['USN'] = device.UDN+\"::\"+service.serviceType;\n\t\t\t\t\tpeer.ssdpPeer.reply(headers,address);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(st == ROOT_DEVICE){\n\t\tfor ( var i in peer.devices) {\n\t\t\tvar device = peer.devices[i];\n\t\t\tif (device.available) {\n\t\t\t\tvar headers = {\n\t\t\t\t\t//'LOCATION': \"http://\"+peer.hostname+\":\"+port+device.descriptionURL,\n                    'LOCATION': \"http://{{networkInterfaceAddress}}:\"+port+device.descriptionURL,\n\t\t\t\t\t'SERVER': device.server,\n\t\t\t\t\t'CONFIGID.UPNP.ORG': device.configId,\n\t\t\t\t\t'ST': ROOT_DEVICE,\n\t\t\t\t\t'USN': device.UDN+\"::\"+ROOT_DEVICE\n\t\t\t\t};\n\t\t\t\tpeer.ssdpPeer.reply(headers,address);\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor ( var i in peer.devices) {\n\t\t\tvar device = peer.devices[i];\n\t\t\tif (device.available) {\n\t\t\t\tvar headers = {\n\t\t\t\t\t//'LOCATION': \"http://\"+peer.hostname+\":\"+port+device.descriptionURL,\n                    'LOCATION': \"http://{{networkInterfaceAddress}}:\"+port+device.descriptionURL,\n\t\t\t\t\t'SERVER': device.server,\n\t\t\t\t\t'CONFIGID.UPNP.ORG': device.configId,\n\t\t\t\t\t'ST': st,\n\t\t\t\t\t'USN': device.UDN+\"::\"+ROOT_DEVICE\n\t\t\t\t};\n\t\t\t\tif (device.UDN == st) {\n\t\t\t\t\theaders['USN'] = device.UDN;\n\t\t\t\t\tpeer.ssdpPeer.reply(headers,address);\n\t\t\t\t}\n\t\t\t\telse if(device.deviceType == st){\n\t\t\t\t\theaders['USN'] = device.UDN+\"::\"+device.deviceType;\n\t\t\t\t\tpeer.ssdpPeer.reply(headers,address);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor ( var j in device.services) {\n\t\t\t\t\t\tvar service = device.services[j];\n\t\t\t\t\t\theaders['USN'] = device.UDN+\"::\"+service.serviceType;\n\t\t\t\t\t\tpeer.ssdpPeer.reply(headers,address);\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar getHostname = function() {\n\tvar interfaces = os.networkInterfaces();\n\tfor ( var devName in interfaces) {\n\t\tvar iface = interfaces[devName];\n\t\tfor ( var i = 0; i < iface.length; i++) {\n\t\t\tvar alias = iface[i];\n\t\t\tif (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal)\n\t\t\t\treturn alias.address;\n\t\t}\n\t}\n\treturn '0.0.0.0';\n\n    // this update allows the SSDP module to replace the {{networkInterfaceAddress}} placeholder with the actual\n    // IP Address of the corresponding Network Interface. In the old implementation the same address is used\n    // for all network interfaces. The old implementation is commented and will be removed in future releases\n    // return \"{{networkInterfaceAddress}}\";\n};\n\nvar httpRequest = function(/* options, body, callback */) {\n\tvar options, body, callback;\n\toptions = arguments[0];\n\tif (arguments.length === 3) {\n\t\tbody = arguments[1];\n\t\tcallback = arguments[2];\n\t}\n\telse if (arguments.length < 3 && typeof arguments[1] === \"function\") {\n\t\tcallback = arguments[1];\n\t}\n\n\tvar req = http.request(options, function(rsp) {\n\t\tvar buffers = [];\n\t\trsp.on(\"data\", function (data) {\n\t\t\tbuffers.push(data)\n\t\t});\n\t\trsp.on(\"end\", function() {\n\t\t\tvar err, data = buffers.length > 0 ? Buffer.concat(buffers).toString(\"utf8\") : \"\";\n\t\t\tif (rsp.statusCode >=400) {\n\t\t\t\terr = true;\n\t\t\t}\n\t\t\tcallback && callback(err, data);\n\t\t});\n\t}).on(\"error\", function(error) {\n        var err = true;\n        callback && callback(err);\n    }).on('timeout', function () {\n        req.abort();\n    });\n    req.setTimeout(2000);\n\tif (body) {\n\t\treq.end(body);\n\t} else {\n\t\treq.end();\n\t}\n};\n\nexports.createPeer = createPeer;\nexports.UPnPError = UPnPError;\n"}